/*
   Eli Moore
   Lab 3
   GPR-200-01

*/


//Ray Struct
struct ray
{
    vec4 origin;
    vec4 direction;
};

//The ray::at function
//inRay is the ray
//t is the position in the ray
vec3 rayAt(ray inRay, float t)
{
    return inRay.origin.xyz + (t * inRay.direction.xyz);
}

//Returns the normal on the sphere that the array collided with
float hit_sphere(in vec3 center, in float radius, in ray inRay )
{
    vec3 oc = inRay.origin.xyz - center;
    float a = dot(inRay.direction, inRay.direction);
    float b = 2.0f * dot(oc, inRay.direction.xyz);
    float c = dot(oc,oc) - radius * radius;
    float discriminant = b*b - 4.0f*a*c;
    bool onSphere = discriminant < 0.0f;
    return onSphere ? -1.0f : (-b - sqrt(discriminant) ) / (2.0*a);
}

//Determines the color of the sphere and the background
vec4 ray_color(ray r)
{
    float t = hit_sphere(vec3(0,0,-1),(sin(iTime) * 0.1f) + 0.5,r);
    bool tOver0 = t > 0.0f;
    vec3 N = normalize(rayAt(r,t) - vec3(0,0,-1));
    
    vec3 unit_direction = normalize(r.direction.xyz);
    t = 0.5f * (unit_direction.y + 1.0f);
    vec3 returnVec3 = (1.0f - t) * vec3(1,1,1) + t*vec3(0.5f, 0.7f, 1.0f);
    return tOver0 ? 0.5*vec4(N.x+1.0f, N.y+1.0f, N.z+1.0f, 2.0f) : vec4((1.0f-t) * vec3(1, 1, 1) + t*vec3(0.5f, 0.7f, 1.0f), 1.0f);
}



// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    // -> what does the ray look like as color?
    
    ray r;
    r.origin = rayOrigin;
    r.direction = rayDirection;
    
    
    
    return ray_color(r);
}


void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);

    // color
    fragColor = calcColor(rayDirection, rayOrigin);

    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
}
